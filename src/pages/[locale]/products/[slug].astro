---
import Layout from '../../../layouts/Layout.astro';
import queryCMS from '../../../lib/cms';
import { StructuredText } from '@datocms/astro';
import { Image } from '@datocms/astro';
import ImageBlock from '../../../components/blocks/Image.astro';
import getAvailableLocales, { getFallbackLocale } from '../../../lib/i18n';

export async function getStaticPaths() {
  const availableLocales = await getAvailableLocales();
  
  const allProductsQuery = `
    query {
      allProducts {
        slug
      }
    }
  `;
  const { allProducts } = await queryCMS(allProductsQuery);

  const paths = [];

  for (const locale of availableLocales) {
    for (const product of allProducts) {
      paths.push({
        params: { locale, slug: product.slug },
      });
    }
  }

  return paths;
}

const fallbackLocale = await getFallbackLocale();
const { locale, slug } = Astro.params;

const query = `
  query GetProductBySlug($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $slug: String) {
    product(locale: $locale, fallbackLocales: $fallbackLocale, filter: { slug: { eq: $slug } }) {
      name
      productType
      description {
        value
        blocks {
          ... on RecordInterface {
            id
            __typename
          }
          ... on ImageRecord {
            image {
              url
              alt
            }
          }
        }
      }
      images {
        responsiveImage(imgixParams: { fit: max, auto: format }) {
          src
          width
          height
          alt
          title
          base64
        }
      }
      _seoMetaTags {
        tag
        attributes
        content
      }           
    }
  }
`;

const { product } = await queryCMS(query, { slug, locale, fallbackLocale });

if (!product) {
  return Astro.redirect('/404');
}

---

<Layout additionalSeo={product._seoMetaTags}>
  <div class="container mx-auto px-4 py-8">

    <h1 class="text-4xl font-bold mb-6 uppercase bg-foreground text-background inline-block p-4">{product.name}</h1>
    <p>{product.productType}</p>
    
    {product.images && product.images.length > 0 && (
      <Image
        data={product.images[0].responsiveImage}
        pictureClass="w-full"
      />          
    )}
    
    <div class="prose prose-invert max-w-none mb-8">
      <StructuredText
        data={product.description}
        blockComponents={
         {
           ImageRecord: ImageBlock
         }}
      />
    </div>
  </div>
</Layout>
