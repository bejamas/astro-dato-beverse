---
import Layout from '../../../layouts/Layout.astro';
import PrimaryButton from '../../../components/PrimaryButton.astro';
import ReviewCard from '../../../components/ReviewCard.astro';
import ContactForm from '../../../components/ContactForm.astro';
import queryCMS from '../../../lib/cms';
import { StructuredText } from '@datocms/astro';
import { Image } from '@datocms/astro';
import getAvailableLocales, { getFallbackLocale } from '../../../lib/i18n';

export async function getStaticPaths() {
  const availableLocales = await getAvailableLocales();
  
  const allProductsQuery = `
    query {
      allProducts {
        slug
      }
    }
  `;
  const { allProducts } = await queryCMS(allProductsQuery);

  const paths = [];

  for (const locale of availableLocales) {
    for (const product of allProducts) {
      paths.push({
        params: { locale, slug: product.slug },
      });
    }
  }

  return paths;
}

const fallbackLocale = await getFallbackLocale();
const { locale, slug } = Astro.params;

const query = `
  query GetProductBySlug($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $slug: String) {
    product(locale: $locale, fallbackLocales: $fallbackLocale, filter: { slug: { eq: $slug } }) {
      name
      productType
      featuresSubtitle
      featuresHeadline
      features {
        ... on FeatureItemRecord {
          label
          url
        }
      }
      actions {
        ... on PrimaryButtonRecord {
          label
          slug
          variant
        }
      }      
      reviews {
        reviews {
          reviewerName
          reviewDate
          reviewScore
          body
        }
      }
      description {
        value
        blocks {
          ... on RecordInterface {
            id
            __typename
          }
          ... on ImageRecord {
            image {
              url
              alt
            }
          }
        }
      }
      images {
        responsiveImage(imgixParams: { w: 640, h: 330, fit: crop, auto: format }) {
          src
          width
          height
          alt
          title
          base64
        }
      }
      _seoMetaTags {
        tag
        attributes
        content
      }           
    }
    contactForm(locale: $locale, fallbackLocales: $fallbackLocale) {
      ctaForm {
        title
        subtitle
        submitUrl
        submitLabel
        messagePlaceholder
        messageLabel
        logos {
          image {
            url
            alt
          }
        }
        emailPlaceholder
        emailLabel
        companyTitle
        companyLogo {
          alt
          url
        }
      }
    }
  }
`;

const { product, contactForm } = await queryCMS(query, { slug, locale, fallbackLocale });

if (!product) {
  return Astro.redirect('/404');
}
---

<Layout additionalSeo={product._seoMetaTags}>
  <div class="">

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-[600px] mx-auto mb-4">
      <div>
        <div class="mb-3 text-xs uppercase">{product.productType}</div>
        <h1 class="text-3xl">{product.name}</h1>
      </div>
      <div class="text-xs leading-5">
        <StructuredText
          data={product.description}
        />
      </div>
    </div>
    
    {product.images && product.images.length > 0 && (
      <Image
        data={product.images[0].responsiveImage}
        pictureClass="w-full"
      />          
    )}

    <div class="grid grid-cols-1 md:grid-cols-2 gap-12">
      <div>
        <div class="mb-3 text-xs uppercase">{product.productType}</div>
        <h2 class="mb-6 text-3xl">{product.featuresHeadline}</h2>
        <div class="mb-6 text-xs leading-4">{product.featuresSubtitle}</div>
        <div class="flex gap-4">
          {product.actions && product.actions.length > 0 && product.actions.map(action => (
            <PrimaryButton label={action.label} slug={action.slug} variant={action.variant} />
          ))}
        </div>
      </div>
      
      <ul class="">
        {product.features && product.features.length > 0 && product.features.map(feature => (
          <li class="p-6">
            <a href="feature.url" class="flex justify-between align-center text-xs">
              {feature.label}
              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 12 12" fill="none">
                <path d="M6.5 3L9.5 6L6.5 9M2.5 3L5.5 6L2.5 9" stroke="#232323" stroke-width="0.75" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </a>
          </li>
        ))}
      </ul>
    </div>

    {product.reviews && product.reviews.reviews && product.reviews.reviews.length > 0 && product.reviews.reviews.map(review => (
      <section class="mt-20">
        <ReviewCard review={review} />
      </section>
    ))}

    <ContactForm form={contactForm.ctaForm} />
  
  </div>
</Layout>
