---
import Layout from '../../../layouts/Layout.astro';
import PrimaryButton from '../../../components/PrimaryButton.astro';
import Heading from '../../../components/Heading.astro';
import Line from '../../../components/Line.astro';
import ReviewCard from '../../../components/ReviewCard.astro';
import ContactForm from '../../../components/ContactForm.astro';
import queryCMS from '../../../lib/cms';
import { StructuredText } from '@datocms/astro';
import getAvailableLocales, { getFallbackLocale } from '../../../lib/i18n';

export async function getStaticPaths() {
  const availableLocales = await getAvailableLocales();
  
  const allBrandsQuery = `
    query {
      allBrands {
        slug
      }
    }
  `;
  const { allBrands } = await queryCMS(allBrandsQuery);

  const paths = [];

  for (const locale of availableLocales) {
    for (const brand of allBrands) {
      paths.push({
        params: { locale, slug: brand.slug },
      });
    }
  }

  return paths;
}

const fallbackLocale = await getFallbackLocale();
const { locale, slug } = Astro.params;

const query = `
  query GetBrandBySlug($locale: SiteLocale, $fallbackLocale: [SiteLocale!], $slug: String) {
    layout {
      logo {
        url
        alt
      }
    }
    brand(locale: $locale, fallbackLocales: $fallbackLocale, filter: { slug: { eq: $slug } }) {
      name
      productType
      featuresSubtitle
      featuresHeadline
      features {
        ... on FeatureItemRecord {
          label
          url
        }
      }
      actions {
        ... on PrimaryButtonRecord {
          label
          slug
          variant
        }
      }      
      reviews {
        title
        reviews {
          reviewerName
          reviewDate
          reviewScore
          body
          avatar {
            alt
            url
          }
        }
      }
      description {
        value
        blocks {
          ... on RecordInterface {
            id
            __typename
          }
          ... on ImageRecord {
            image {
              url
              alt
            }
          }
        }
      }
      images {
        url
        alt                        
      }
      accentColor {
        hex
      }
      _seoMetaTags {
        tag
        attributes
        content
      }           
    }
    contactForm {
      ctaForm(locale: $locale, fallbackLocales: $fallbackLocale) {
        title
        subtitle
        submitUrl
        submitLabel
        messagePlaceholder
        messageLabel
        logos {
          image {
            url
            alt
          }
        }
        emailPlaceholder
        emailLabel
        companyTitle
        companyLogo {
          alt
          url
        }
      }
    }
  }
`;

const { brand, contactForm, layout } = await queryCMS(query, { slug, locale, fallbackLocale });

if (!brand) {
  return Astro.redirect('/404');
}
---

<Layout additionalSeo={brand._seoMetaTags} logo={layout.logo}>
  <div style={{ "--color-primary": brand.accentColor.hex }}>
    <section>
      <Heading index="01" text="" />      
      <Line />
      <div class="pt-6 px-4 pb-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
          <div>
            <div class="mb-3 text-xs uppercase">{brand.productType}</div>
            <h1 class="text-3xl break-words">{brand.name}</h1>
          </div>
          <div class="text-xs leading-5">
            <StructuredText
              data={brand.description}
            />
          </div>
        </div>
        <div class="bg-primary aspect-640/330">
          {brand.images && brand.images.length > 0 && (
            <img src={brand.images[0].url} alt={brand.images[0].alt} class="w-full h-full select-none" />      
          )}
        </div>
      </div>
    </section>

    <section>
      <Heading index="02" text={brand.name} />
      <Line />
      <div class="grid grid-cols-1 md:grid-cols-2 gap-12 px-4 pb-4">
        <div>
          <div class="mt-6 mb-3 text-xs uppercase">{brand.productType}</div>
          <h2 class="mb-6 text-3xl">{brand.featuresHeadline}</h2>
          <div class="mb-6 text-xs leading-4">{brand.featuresSubtitle}</div>
          <div class="flex gap-4 mb-6">
            {brand.actions && brand.actions.length > 0 && brand.actions.map(action => (
              <PrimaryButton label={action.label} slug={action.slug} variant={action.variant} />
            ))}
          </div>
        </div>
        
        <ul class="">
          {brand.features && brand.features.length > 0 && brand.features.map(feature => (
            <li class="p-6">
              <span class="flex justify-between align-center text-xs">
                <span class="relative before:absolute before:content-[''] before:right-[calc(100%+8px)] before:top-0 before:bottom-0 before:m-auto before:h-6 before:w-1.5 before:bg-border">
                  {feature.label}
                </span>
                <span class="flex items-center justify-center w-5 h-5 rounded-xs border border-border">
                  <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-check"><polyline points="20 6 9 17 4 12"></polyline></svg>
                </span>
              </span>
            </li>
          ))}
        </ul>
      </div>
    </section>

    <section>
      <Heading index="03" text={brand.reviews.title} />
      {brand.reviews && brand.reviews.reviews && brand.reviews.reviews.length > 0 && brand.reviews.reviews.map(review => (
        <ReviewCard review={review} />
      ))}
    </section>

    <section>
      <Heading index="04" text="CTA" />
      <div class="p-4">
        <ContactForm form={contactForm.ctaForm} />
      </div>
    </section>
    <Line />
  </div>
</Layout>
